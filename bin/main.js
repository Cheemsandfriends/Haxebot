// Generated by Haxe 4.2.1+bf9ff69
const { Routes } = require('discord-api-types/v9');
;(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.start = function() {
	Main.universe = new ecs_Universe(1000);
	Main.universe.systems.add(new systems_commands_Hi(Main.universe));
	Main.universe.systems.add(new systems_commands_Help(Main.universe));
	Main.universe.systems.add(new systems_commands_Haxelib(Main.universe));
	Main.universe.systems.add(new systems_commands_Notify(Main.universe));
	Main.universe.systems.add(new systems_commands_Run(Main.universe));
	Main.universe.systems.add(new systems_commands_Rtfm(Main.universe));
	Main.universe.systems.add(new systems_commands_Roundup(Main.universe));
	Main.universe.systems.add(new systems_commands_Api(Main.universe));
	var client = new discord_$js_Client({ intents : ["GUILDS","GUILD_MESSAGES"]});
	client.once("ready",function() {
		var $l=arguments.length;
		var _ = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){_[$i-0]=arguments[$i];}
		haxe_Log.trace("Ready!",{ fileName : "src/Main.hx", lineNumber : 43, className : "Main", methodName : "start"});
		Main.connected = true;
	});
	client.on("messageCreate",function(message) {
		haxe_Log.trace(message,{ fileName : "src/Main.hx", lineNumber : 48, className : "Main", methodName : "start"});
	});
	client.on("interactionCreate",function(interaction) {
		if(!interaction.isCommand()) {
			return;
		}
		var command = { name : interaction.commandName, content : components_CommandOptions.None};
		switch(interaction.commandName) {
		case "api":
			command.content = components_CommandOptions.API(interaction.options.getString("package"));
			break;
		case "haxelib":
			command.content = components_CommandOptions.Haxelib(interaction.options.getString("command"));
			break;
		case "help":
			command.content = components_CommandOptions.Help(interaction.options.getString("category"));
			break;
		case "hi":
			command.content = components_CommandOptions.Hi;
			break;
		case "notify":
			command.content = components_CommandOptions.Notify(interaction.options.getString("channel"));
			break;
		case "roundup":
			command.content = components_CommandOptions.Roundup(interaction.options.getNumber("issue"));
			break;
		case "rtfm":
			command.content = components_CommandOptions.Rtfm(interaction.options.getString("channel"));
			break;
		case "run":
			command.content = components_CommandOptions.Code(interaction.options.getString("code"));
			break;
		case "togglemacros":
			command.content = components_CommandOptions.Notify(interaction.options.getString("channel"));
			break;
		default:
		}
		var _ecsTmpEntity = Main.universe.entities.create();
		Main.universe.components.set_components_Command(_ecsTmpEntity,1,command);
		Main.universe.components.set_discord_builder_BaseCommandInteraction(_ecsTmpEntity,0,interaction);
		var ecsEntCompFlags = Main.universe.components.flags[ecs_Entity.id(_ecsTmpEntity)];
		var ecsTmpFamily = Main.universe.families.get(0);
		if(bits_Bits.areSet(ecsEntCompFlags,ecsTmpFamily.componentsMask)) {
			ecsTmpFamily.add(_ecsTmpEntity);
		}
	});
	client.login(Main.config.discord_token);
	new haxe_Timer(100).run = function() {
		Main.universe.update(1);
	};
};
Main.main = function() {
	try {
		Main.config = JSON.parse(js_node_Fs.readFileSync("./config.json",{ encoding : "utf8"}));
	} catch( _g ) {
		haxe_Log.trace(haxe_Exception.caught(_g).get_message(),{ fileName : "src/Main.hx", lineNumber : 94, className : "Main", methodName : "main"});
	}
	if(Main.config == null || Main.config.discord_token == "TOKEN_HERE") {
		throw haxe_Exception.thrown("Enter your discord auth token.");
	}
	var commands = [];
	var hi = new discord_$builder_SlashCommandBuilder().setName("hi").setDescription("Replies with hi!");
	var help = new discord_$builder_SlashCommandBuilder().setName("help").setDescription("Haxebot commands list").addStringOption(new discord_$builder_SlashCommandStringOption().setName("category").setDescription("help section"));
	var haxelib = new discord_$builder_SlashCommandBuilder().setName("haxelib").setDescription("Haxelib").addStringOption(new discord_$builder_SlashCommandStringOption().setName("command").setDescription("Haxe library manager"));
	var notify = new discord_$builder_SlashCommandBuilder().setName("notify").setDescription("Subscribe to channel specific updates").addStringOption(new discord_$builder_SlashCommandStringOption().setName("channel").setDescription("Channels to subscribe to separated by a space"));
	var run = new discord_$builder_SlashCommandBuilder().setName("run").setDescription("Run haxe code").addStringOption(new discord_$builder_SlashCommandStringOption().setName("code").setDescription("the haxe code").setRequired(true));
	var rtfm = new discord_$builder_SlashCommandBuilder().setName("rtfm").setDescription("Short paragraphs introducing frameworks").addStringOption(new discord_$builder_SlashCommandStringOption().setName("channel").setDescription("optional channel name"));
	var roundup = new discord_$builder_SlashCommandBuilder().setName("roundup").setDescription("Configure auto-roundup posting").addNumberOption(new discord_$builder_SlashCommandNumberOption().setName("issue").setDescription("What issue of roundup to start tracking from").setRequired(true));
	var api = new discord_$builder_SlashCommandBuilder().setName("api").setDescription("Grab documentation from supported API's").addStringOption(new discord_$builder_SlashCommandStringOption().setName("package").setDescription("path to the class/method/var").setRequired(true));
	commands.push(discord_$builder_AnySlashCommand.fromBase(hi));
	commands.push(discord_$builder_AnySlashCommand.fromString(help));
	commands.push(discord_$builder_AnySlashCommand.fromString(haxelib));
	commands.push(discord_$builder_AnySlashCommand.fromString(notify));
	commands.push(discord_$builder_AnySlashCommand.fromString(run));
	commands.push(discord_$builder_AnySlashCommand.fromString(rtfm));
	commands.push(discord_$builder_AnySlashCommand.fromNumber(roundup));
	commands.push(discord_$builder_AnySlashCommand.fromString(api));
	new discordjs_rest_REST({ version : "9"}).setToken(Main.config.discord_token).put(Routes.applicationGuildCommands(Main.config.client_id,Main.config.server_id),{ body : commands}).then(function(_) {
		haxe_Log.trace("Successfully registered application commands.",{ fileName : "src/Main.hx", lineNumber : 139, className : "Main", methodName : "main"});
	},function(err) {
		haxe_Log.trace(err,{ fileName : "src/Main.hx", lineNumber : 139, className : "Main", methodName : "main"});
	});
	Main.start();
};
Math.__name__ = true;
var NodeHtmlParser = require("node-html-parser");
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
function Util_loadFile(filename,pos) {
	var data = null;
	try {
		data = JSON.parse(js_node_Fs.readFileSync("./commands/" + filename + ".json",{ encoding : "utf8"}));
	} catch( _g ) {
		haxe_Log.trace(haxe_Exception.caught(_g),{ fileName : "src/Util.hx", lineNumber : 12, className : "_Util.Util_Fields_", methodName : "loadFile"});
		haxe_Log.trace("Failed to load file or parse json",{ fileName : "src/Util.hx", lineNumber : 13, className : "_Util.Util_Fields_", methodName : "loadFile", customParams : [pos]});
	}
	return data;
}
function Util_hasRole(role,interaction) {
	var guild = interaction.member.roles.cache.get(role);
	if(interaction.guild.available) {
		var _v_ = guild == null ? null : guild.members;
		if(_v_ == null) {
			return null;
		} else {
			return _v_.has(interaction.user.id);
		}
	} else {
		return false;
	}
}
var bits_Bits = {};
bits_Bits.set = function(this1,pos) {
	if(pos < 32) {
		this1[0] |= 1 << pos;
	} else {
		var cell = pos / 32 | 0;
		if(this1.length <= cell) {
			var _g = this1.length;
			var _g1 = cell + 1;
			while(_g < _g1) this1[_g++] = 0;
		}
		this1[cell] |= 1 << pos - cell * 32;
	}
};
bits_Bits.areSet = function(this1,bits) {
	var data = bits;
	var has = true;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var cell = _g++;
		if(cell < this1.length) {
			has = data[cell] == (this1[cell] & data[cell]);
		} else {
			has = 0 == data[cell];
		}
		if(!has) {
			break;
		}
	}
	return has;
};
bits_Bits.isEmpty = function(this1) {
	var empty = true;
	var _g = 0;
	while(_g < this1.length) if(this1[_g++] != 0) {
		empty = false;
		break;
	}
	return empty;
};
var components_CommandOptions = $hxEnums["components.CommandOptions"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"components.CommandOptions",toString:$estr}
	,Hi: {_hx_name:"Hi",_hx_index:1,__enum__:"components.CommandOptions",toString:$estr}
	,Roundup: ($_=function(number) { return {_hx_index:2,number:number,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Roundup",$_.__params__ = ["number"],$_)
	,Rtfm: ($_=function(channel) { return {_hx_index:3,channel:channel,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Rtfm",$_.__params__ = ["channel"],$_)
	,API: ($_=function(channel) { return {_hx_index:4,channel:channel,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="API",$_.__params__ = ["channel"],$_)
	,Notify: ($_=function(channel) { return {_hx_index:5,channel:channel,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Notify",$_.__params__ = ["channel"],$_)
	,Code: ($_=function(code) { return {_hx_index:6,code:code,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Code",$_.__params__ = ["code"],$_)
	,Help: ($_=function(category) { return {_hx_index:7,category:category,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Help",$_.__params__ = ["category"],$_)
	,Haxelib: ($_=function(command) { return {_hx_index:8,command:command,__enum__:"components.CommandOptions",toString:$estr}; },$_._hx_name="Haxelib",$_.__params__ = ["command"],$_)
};
components_CommandOptions.__constructs__ = [components_CommandOptions.None,components_CommandOptions.Hi,components_CommandOptions.Roundup,components_CommandOptions.Rtfm,components_CommandOptions.API,components_CommandOptions.Notify,components_CommandOptions.Code,components_CommandOptions.Help,components_CommandOptions.Haxelib];
var discord_$builder_AnySlashCommand = {};
discord_$builder_AnySlashCommand._new = function(builder) {
	return builder;
};
discord_$builder_AnySlashCommand.fromBase = function(base) {
	return discord_$builder_AnySlashCommand._new(base);
};
discord_$builder_AnySlashCommand.fromString = function(string) {
	return discord_$builder_AnySlashCommand._new(string);
};
discord_$builder_AnySlashCommand.fromNumber = function(number) {
	return discord_$builder_AnySlashCommand._new(number);
};
var discord_$builder_SlashCommandBuilder = require("@discordjs/builders").SlashCommandBuilder;
var discord_$builder_SlashCommandNumberOption = require("@discordjs/builders").SlashCommandNumberOption;
var discord_$builder_SlashCommandStringOption = require("@discordjs/builders").SlashCommandStringOption;
var discord_$js_Client = require("discord.js").Client;
var discord_$js_MessageEmbed = require("discord.js").MessageEmbed;
var discordjs_rest_REST = require("@discordjs/rest").REST;
var ecs_Components_$components_$Command = function(_size) {
	this.components = new Array(_size);
};
ecs_Components_$components_$Command.__name__ = true;
ecs_Components_$components_$Command.prototype = {
	set: function(_entity,_component) {
		this.components[ecs_Entity.id(_entity)] = _component;
	}
	,get: function(_entity) {
		return this.components[ecs_Entity.id(_entity)];
	}
};
var ecs_Components_$discord_$builder_$BaseCommandInteraction = function(_size) {
	this.components = new Array(_size);
};
ecs_Components_$discord_$builder_$BaseCommandInteraction.__name__ = true;
ecs_Components_$discord_$builder_$BaseCommandInteraction.prototype = {
	set: function(_entity,_component) {
		this.components[ecs_Entity.id(_entity)] = _component;
	}
	,get: function(_entity) {
		return this.components[ecs_Entity.id(_entity)];
	}
};
var ecs_Entity = {};
ecs_Entity._new = function(_id) {
	return _id;
};
ecs_Entity.id = function(this1) {
	return this1;
};
var ecs_Family = function(_id,_cmpMask,_resMask,_size) {
	this.id = _id;
	this.componentsMask = _cmpMask;
	this.resourcesMask = _resMask;
	this.onEntityAdded = new ecs_ds_Signal_$ecs_$Entity();
	this.onEntityRemoved = new ecs_ds_Signal_$ecs_$Entity();
	this.entities = new ecs_ds_SparseSet(_size);
	this.active = bits_Bits.isEmpty(this.resourcesMask);
};
ecs_Family.__name__ = true;
ecs_Family.prototype = {
	add: function(_entity) {
		if(!this.entities.has(_entity)) {
			this.entities.insert(_entity);
			if(this.isActive()) {
				this.onEntityAdded.notify(_entity);
			}
		}
	}
	,remove: function(_entity) {
		if(this.entities.has(_entity)) {
			this.entities.remove(_entity);
			if(this.isActive()) {
				this.onEntityRemoved.notify(_entity);
			}
		}
	}
	,isActive: function() {
		return this.active;
	}
	,iterator: function() {
		return new ecs__$Family_FamilyIterator(this.entities,this.isActive());
	}
};
var ecs__$Family_FamilyIterator = function(_set,_active) {
	this.set = _set;
	this.active = _active;
	this.idx = 0;
};
ecs__$Family_FamilyIterator.__name__ = true;
ecs__$Family_FamilyIterator.prototype = {
	hasNext: function() {
		if(this.active) {
			return this.idx < this.set.size();
		} else {
			return false;
		}
	}
	,next: function() {
		return this.set.getDense(this.idx++);
	}
};
var ecs_System = function(_universe) {
	this.universe = _universe;
};
ecs_System.__name__ = true;
ecs_System.prototype = {
	onAdded: function() {
	}
	,update: function(_dt) {
	}
};
var ecs_Universe = function(_maxEntities) {
	this.entities = new ecs_core_EntityManager(_maxEntities);
	this.components = new ecs_core_ComponentManager(this.entities);
	this.resources = new ecs_core_ResourceManager();
	this.families = new ecs_core_FamilyManager(this.components,this.resources,_maxEntities);
	this.systems = new ecs_core_SystemManager();
};
ecs_Universe.__name__ = true;
ecs_Universe.prototype = {
	update: function(_dt) {
		this.systems.update(_dt);
	}
};
var ecs_core_ComponentManager = function(_entities) {
	this.entities = _entities;
	this.flags = new Array(_entities.capacity());
	this.components = new Array(2);
	this.components[1] = new ecs_Components_$components_$Command(_entities.capacity());
	this.components[0] = new ecs_Components_$discord_$builder_$BaseCommandInteraction(_entities.capacity());
	var _g = 0;
	var _g1 = this.flags.length;
	while(_g < _g1) this.flags[_g++] = [0];
};
ecs_core_ComponentManager.__name__ = true;
ecs_core_ComponentManager.prototype = {
	set_discord_builder_BaseCommandInteraction: function(_entity,_id,_component) {
		this.components[_id].set(_entity,_component);
		bits_Bits.set(this.flags[ecs_Entity.id(_entity)],_id);
	}
	,set_components_Command: function(_entity,_id,_component) {
		this.components[_id].set(_entity,_component);
		bits_Bits.set(this.flags[ecs_Entity.id(_entity)],_id);
	}
	,getTable: function(_compID) {
		return this.components[_compID];
	}
};
var ecs_core_EntityManager = function(_max) {
	this.storage = new Array(_max);
	this.nextID = 0;
};
ecs_core_EntityManager.__name__ = true;
ecs_core_EntityManager.prototype = {
	create: function() {
		var idx = this.nextID++;
		var e = ecs_Entity._new(idx);
		this.storage[idx] = e;
		return e;
	}
	,capacity: function() {
		return this.storage.length;
	}
};
var ecs_core_FamilyManager = function(_components,_resources,_size) {
	this.families = new Array(1);
	var this1 = [0];
	var _g = this1.length;
	while(_g < 1) this1[_g++] = 0;
	var cmpBits = this1;
	bits_Bits.set(cmpBits,0);
	bits_Bits.set(cmpBits,1);
	this.families[0] = new ecs_Family(0,cmpBits,[0],_size);
	this.components = _components;
	this.resources = _resources;
	this.number = this.families.length;
};
ecs_core_FamilyManager.__name__ = true;
ecs_core_FamilyManager.prototype = {
	get: function(_index) {
		return this.families[_index];
	}
};
var ecs_core_ResourceManager = function() {
	this.flags = [0];
	this.resources = new Array(0);
};
ecs_core_ResourceManager.__name__ = true;
var ecs_core_SystemManager = function() {
	this.active = [];
};
ecs_core_SystemManager.__name__ = true;
ecs_core_SystemManager.prototype = {
	add: function(_system) {
		this.active.push(_system);
		_system.onAdded();
	}
	,update: function(_dt) {
		var _g = 0;
		var _g1 = this.active;
		while(_g < _g1.length) _g1[_g++].update(_dt);
	}
};
var ecs_ds_Signal_$ecs_$Entity = function() {
	this.subscribers = [];
};
ecs_ds_Signal_$ecs_$Entity.__name__ = true;
ecs_ds_Signal_$ecs_$Entity.prototype = {
	notify: function(_data) {
		var _g = 0;
		var _g1 = this.subscribers;
		while(_g < _g1.length) _g1[_g++](_data);
	}
};
var ecs_ds_SparseSet = function(_size) {
	this.sparse = new Array(_size);
	this.dense = new Array(_size);
	this.number = 0;
	var _g = 0;
	var _g1 = this.sparse.length;
	while(_g < _g1) this.sparse[_g++] = 0;
	var _g = 0;
	var _g1 = this.dense.length;
	while(_g < _g1) this.dense[_g++] = ecs_Entity.none;
};
ecs_ds_SparseSet.__name__ = true;
ecs_ds_SparseSet.prototype = {
	has: function(_entity) {
		if(this.sparse[ecs_Entity.id(_entity)] < this.number) {
			return this.dense[this.sparse[ecs_Entity.id(_entity)]] == _entity;
		} else {
			return false;
		}
	}
	,insert: function(_entity) {
		this.dense[this.number] = _entity;
		this.sparse[ecs_Entity.id(_entity)] = this.number;
		this.number++;
	}
	,remove: function(_entity) {
		var temp = this.dense[this.number - 1];
		this.dense[this.sparse[ecs_Entity.id(_entity)]] = temp;
		this.sparse[ecs_Entity.id(temp)] = this.sparse[ecs_Entity.id(_entity)];
		this.number--;
	}
	,getDense: function(_idx) {
		return this.dense[_idx];
	}
	,size: function() {
		return this.number;
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpNodeJs = function(url) {
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpNodeJs.__name__ = true;
haxe_http_HttpNodeJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpNodeJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var parsedUrl = new js_node_url_URL(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.pathname;
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		var uri = null;
		var _g = 0;
		var _g1 = this.params;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			var s = p.name;
			var uri1 = encodeURIComponent(s) + "=";
			var s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		var question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		var httpResponse = function(res) {
			res.setEncoding("binary");
			var s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			var data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				var buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				var httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function() { };
haxe_io_Path.__name__ = true;
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_url_URL = require("url").URL;
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(_g1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g2 ) {
				throw _g1;
			}
			if(!stat.isDirectory()) {
				throw _g1;
			}
		}
	}
};
var systems_CommandBase = function(_universe) {
	ecs_System.call(this,_universe);
};
systems_CommandBase.__name__ = true;
systems_CommandBase.__super__ = ecs_System;
systems_CommandBase.prototype = $extend(ecs_System.prototype,{
	update: function(_) {
		if(!Main.connected) {
			return;
		}
		var _g = this.commands.iterator();
		while(_g.active && _g.idx < _g.set.size()) {
			var entity = _g.set.getDense(_g.idx++);
			var interaction = this.table29372b5f3de85aef648e8f952540e2ec.get(entity);
			var command = this.tableff7698320b2346222a0ba18495307447.get(entity);
			if(command.name == this.get_name()) {
				this.run(command,interaction);
				this.commands.remove(entity);
			}
		}
	}
	,onAdded: function() {
		ecs_System.prototype.onAdded.call(this);
		this.commands = this.universe.families.get(0);
		this.table29372b5f3de85aef648e8f952540e2ec = this.universe.components.getTable(0);
		this.tableff7698320b2346222a0ba18495307447 = this.universe.components.getTable(1);
	}
});
var systems_commands_Api = function(_universe) {
	systems_CommandBase.call(this,_universe);
};
systems_commands_Api.__name__ = true;
systems_commands_Api.__super__ = systems_CommandBase;
systems_commands_Api.prototype = $extend(systems_CommandBase.prototype,{
	run: function(command,interaction) {
		if(command.content == null) {
			return;
		}
		var _g = command.content;
		if(_g._hx_index == 4) {
			var _g1 = _g.channel;
			var docs;
			switch(interaction.channel.id) {
			case "165234904815239168":
				docs = systems_commands_Api.flixel;
				break;
			case "501408700142059520":
				docs = systems_commands_Api.heaps;
				break;
			case "769686258049351722":
				docs = systems_commands_Api.lime;
				break;
			case "769686284318146561":
				docs = systems_commands_Api.openfl;
				break;
			default:
				docs = systems_commands_Api.haxe;
			}
			if(_g1.indexOf("Flx") != -1 || _g1.indexOf("flixel.") != -1) {
				docs = systems_commands_Api.flixel;
			}
			if(_g1.indexOf("haxe.") != -1) {
				docs = systems_commands_Api.haxe;
			}
			if(_g1.indexOf("openfl.") != -1) {
				docs = systems_commands_Api.openfl;
			}
			if(_g1.indexOf("lime.") != -1) {
				docs = systems_commands_Api.lime;
			}
			var check = ["h2d","h3d","hxd","hxsl"];
			var _g = 0;
			while(_g < check.length) {
				if(_g1.indexOf(check[_g++]) == -1) {
					continue;
				}
				docs = systems_commands_Api.heaps;
				break;
			}
			var base = docs;
			var split = null;
			var _g = command.content;
			if(_g._hx_index == 4) {
				split = _g.channel.split(" ");
			}
			if(split[2] != null) {
				switch(split[2].toLowerCase()) {
				case "flixel":
					base = systems_commands_Api.flixel;
					break;
				case "haxe":
					base = systems_commands_Api.haxe;
					break;
				case "heaps":
					base = systems_commands_Api.heaps;
					break;
				case "lime":
					base = systems_commands_Api.lime;
					break;
				case "openfl":
					base = systems_commands_Api.openfl;
					break;
				default:
					base = systems_commands_Api.haxe;
				}
			}
			var url = base + StringTools.replace(split[0],".","/") + ".html";
			this.extractDoxData({ class_name : split[0].substring(split[0].lastIndexOf(".") + 1), path : split[0], identifier : split[1], page : split[1] != null ? url + ("#" + split[1]) : url},interaction);
		}
	}
	,extractDoxData: function(info,interaction) {
		var http = new haxe_http_HttpNodeJs(info.page);
		http.onData = function(resp) {
			var body = NodeHtmlParser.parse(resp).querySelector(".body");
			if(body == null) {
				return;
			}
			var sections = body.querySelectorAll(".section");
			var cls_desc = body.querySelector(".doc-main").innerText;
			var embed = new discord_$js_MessageEmbed();
			embed.setTitle(info.class_name + ("" + (info.identifier != null ? "#" + info.identifier : "")));
			embed.setURL(http.url);
			var reply_body = "";
			var _this = body.querySelectorAll(".fields");
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g1_value = _this[_g_current++];
				var _g1_key = _g_current - 1;
				var id_check = new EReg("<span class=\"identifier\">(.*?)</span","gm");
				var _g = 0;
				var _g1 = _g1_value.querySelectorAll(".field");
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					if(info.identifier == null) {
						break;
					}
					if(id_check.match(field.innerHTML) && id_check.matched(1).toLowerCase() == info.identifier.toLowerCase()) {
						var del_value_meta_regx = new EReg("(@:value\\(.*?\\)+)","gmi");
						var type = StringTools.htmlUnescape(field.querySelector(">h3").innerText);
						if(del_value_meta_regx.match(type)) {
							type = StringTools.replace(type,del_value_meta_regx.matched(1),"");
						}
						type = StringTools.replace(type,"static","");
						type = StringTools.replace(type,"read only","(read only) ");
						var desc = field.querySelector(".doc").innerText;
						var section = sections[_g1_key].innerText;
						reply_body = "" + ("**" + HxOverrides.substr(section,0,section.length - 1) + "** \n```hx\n" + type + "\n```");
						if(StringTools.trim(desc).length > 0) {
							reply_body += "**Description**\n```" + desc + "```";
						}
						embed.setDescription(StringTools.htmlUnescape(reply_body));
						interaction.reply({ embeds : [embed]});
						return;
					}
				}
			}
			if(StringTools.trim(cls_desc).length > 0) {
				reply_body = "" + ("```\n" + cls_desc + "\n```");
			}
			if(reply_body.length > 0) {
				embed.setDescription(StringTools.htmlUnescape(reply_body));
				interaction.reply({ embeds : [embed]});
			}
		};
		http.onError = function(msg) {
			interaction.reply("An error occured finding the request.");
		};
		http.request();
	}
	,get_name: function() {
		return "api";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var systems_commands_Haxelib = function(_universe) {
	this.command_history = new haxe_ds_StringMap();
	this.super_mod_id = "198916468312637440";
	systems_CommandBase.call(this,_universe);
};
systems_commands_Haxelib.__name__ = true;
systems_commands_Haxelib.__super__ = systems_CommandBase;
systems_commands_Haxelib.prototype = $extend(systems_CommandBase.prototype,{
	run: function(command,interaction) {
		var _gthis = this;
		var h = this.command_history.h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g1_value = h[key];
			if(new Date().getTime() - _g1_value.timestamp > 5000) {
				var _this = this.command_history;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
		}
		var role_status = Util_hasRole(this.super_mod_id,interaction);
		var _g = command.content;
		if(_g._hx_index == 8) {
			var command = _g.command;
			if(command != "list" && !role_status) {
				interaction.reply("Invalid Permissions.").then(null,null);
				return;
			}
			var channel = interaction.channel;
			var commands = [];
			var _g = 0;
			var _g1 = command.split(" ");
			while(_g < _g1.length) commands.push(_g1[_g++]);
			var $process = "./haxe/haxelib";
			if(!sys_FileSystem.exists("./haxe/haxelib")) {
				$process = "haxelib";
			}
			var ls = js_node_ChildProcess.spawn($process,commands);
			ls.stdout.on("data",function(data) {
				if(data.indexOf("KB") == -1 && data.indexOf("%") == -1) {
					if(!Object.prototype.hasOwnProperty.call(_gthis.command_history.h,command)) {
						var embed = new discord_$js_MessageEmbed().setTitle("Status").setDescription(data.toString());
						interaction.reply({ embeds : [embed]}).then(function(data) {
							return _gthis.addHistory(command,interaction);
						},null);
					} else {
						var embed = new discord_$js_MessageEmbed().setTitle("Status").setDescription(data.toString());
						_gthis.command_history.h[command].interaction.editReply({ embeds : [embed]}).then(null,function(err) {
							haxe_Log.trace(err,{ fileName : "src/systems/commands/Haxelib.hx", lineNumber : 55, className : "systems.commands.Haxelib", methodName : "run"});
						});
					}
				}
			});
			ls.stderr.on("data",function(data) {
				var embed = new discord_$js_MessageEmbed();
				embed.type = "article";
				embed.addField("Haxelib Error",data);
				return channel.send(embed);
			});
		}
	}
	,addHistory: function(command,interaction) {
		if(Object.prototype.hasOwnProperty.call(this.command_history.h,command)) {
			return false;
		}
		var this1 = this.command_history;
		var value = { timestamp : new Date().getTime(), interaction : interaction};
		this1.h[command] = value;
		return true;
	}
	,get_name: function() {
		return "haxelib";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var systems_commands_Help = function(_universe) {
	systems_CommandBase.call(this,_universe);
};
systems_commands_Help.__name__ = true;
systems_commands_Help.__super__ = systems_CommandBase;
systems_commands_Help.prototype = $extend(systems_CommandBase.prototype,{
	onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
		this.data = Util_loadFile("help",{ fileName : "src/systems/commands/Help.hx", lineNumber : 9, className : "systems.commands.Help", methodName : "onAdded"});
	}
	,run: function(command,interaction) {
		if(this.data == null || this.data.length == 0) {
			haxe_Log.trace("no help content configured",{ fileName : "src/systems/commands/Help.hx", lineNumber : 14, className : "systems.commands.Help", methodName : "run"});
			return;
		}
		var _g = command.content;
		if(_g._hx_index == 7) {
			var _g1 = _g.category;
			var msg = "";
			var _this = this.data;
			var _g_current = 0;
			while(_g_current < _this.length) {
				var _g1_value = _this[_g_current];
				var _g1_key = _g_current++;
				if(_g1 == null) {
					if(!_g1_value.show_help) {
						continue;
					}
					msg += "- `/" + _g1_value.type + "`: " + _g1_value.content;
					if(_g1_key != this.data.length - 1) {
						msg += "\n";
					}
				} else if(_g1_value.type == _g1) {
					msg = "/`" + _g1_value.type + "`: " + _g1_value.content;
					break;
				}
			}
			interaction.reply(msg);
		}
	}
	,get_name: function() {
		return "help";
	}
});
var systems_commands_Hi = function(_universe) {
	systems_CommandBase.call(this,_universe);
};
systems_commands_Hi.__name__ = true;
systems_commands_Hi.__super__ = systems_CommandBase;
systems_commands_Hi.prototype = $extend(systems_CommandBase.prototype,{
	run: function(command,interaction) {
		interaction.reply("Hey there");
	}
	,get_name: function() {
		return "hi";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var systems_commands_Notify = function(_universe) {
	systems_CommandBase.call(this,_universe);
};
systems_commands_Notify.__name__ = true;
systems_commands_Notify.__super__ = systems_CommandBase;
systems_commands_Notify.prototype = $extend(systems_CommandBase.prototype,{
	getRole: function(channel) {
		switch(channel) {
		case "<#165234904815239168>":case "flixel":
			return "761714697468248125";
		case "<#286485321925918721>":case "announcements":
			return "761714325227700225";
		case "<#501447516852715525>":case "kha":
			return "761714809179209818";
		case "<#565569107701923852>":case "haxeui":
			return "761714853403820052";
		case "<#561254298449739776>":case "dvorak":
			return "903006951896666153";
		case "<#501408700142059520>":case "heaps":
			return "761714775902126080";
		default:
			return "err";
		}
	}
	,run: function(command,interaction) {
		var _g = command.content;
		if(_g._hx_index == 5) {
			var _this = _g.channel.split(" ");
			var _g_current = 0;
			while(_g_current < _this.length) {
				var channel = [_this[_g_current++]];
				var role = this.getRole(channel[0]);
				if(role == "err") {
					continue;
				}
				var found = false;
				var jsIterator = interaction.member.roles.cache.entries();
				var _g2_lastStep = jsIterator.next();
				while(!_g2_lastStep.done) {
					var v = _g2_lastStep.value;
					_g2_lastStep = jsIterator.next();
					if(v[0] == role) {
						found = true;
						break;
					}
				}
				if(found) {
					interaction.member.roles.remove(role).then((function(channel) {
						return function(success) {
							return interaction.reply("Unsubscribed from " + channel[0] + " updates");
						};
					})(channel));
				} else {
					interaction.member.roles.add(role).then((function(channel) {
						return function(success) {
							return interaction.reply("Subscribed to " + channel[0] + " updates");
						};
					})(channel));
				}
			}
		}
	}
	,get_name: function() {
		return "notify";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var systems_commands_Roundup = function(_universe) {
	this.announcement_channel = "286485321925918721";
	this.super_mod_id = "198916468312637440";
	this.roundup = -1;
	this.active = false;
	this.last_checked = -1;
	systems_CommandBase.call(this,_universe);
};
systems_commands_Roundup.__name__ = true;
systems_commands_Roundup.__super__ = systems_CommandBase;
systems_commands_Roundup.prototype = $extend(systems_CommandBase.prototype,{
	getHaxeIoPage: function() {
		var _gthis = this;
		var data = new haxe_http_HttpNodeJs("https://raw.githubusercontent.com/skial/haxe.io/master/src/roundups/" + this.roundup + ".md");
		var embed = new discord_$js_MessageEmbed();
		data.onError = function(error) {
			haxe_Log.trace(error,{ fileName : "src/systems/commands/Roundup.hx", lineNumber : 21, className : "systems.commands.Roundup", methodName : "getHaxeIoPage"});
		};
		data.onData = function(body) {
			var regex = new EReg("### News and Articles(.*?)##### _In case you missed it_","gmis");
			if(regex.match(body)) {
				embed.setTitle("Haxe Roundup #" + _gthis.roundup);
				embed.setURL("https://haxe.io/roundups/" + _gthis.roundup + "/");
				var desc_split = StringTools.trim(regex.matched(1)).split("\n");
				var desc = "\n**News And Articles**";
				var _g = 0;
				while(_g < desc_split.length) {
					var item = desc_split[_g];
					++_g;
					if(desc.length + StringTools.trim(item).length + 3 >= 2048) {
						continue;
					}
					desc += "\n" + StringTools.trim(item);
				}
				desc += "\n...";
				embed.setDescription(desc);
				_gthis.channel.send({ embeds : [embed]}).then(function(_) {
					return _gthis.roundup++;
				});
			}
		};
		data.request();
	}
	,update: function(_) {
		systems_CommandBase.prototype.update.call(this,_);
		if(!this.active || this.roundup == -1 || new Date().getTime() - this.last_checked <= 86400000) {
			return;
		}
		if(this.channel != null) {
			this.last_checked = new Date().getTime();
			this.getHaxeIoPage();
		}
	}
	,run: function(command,interaction) {
		var _gthis = this;
		if(!Util_hasRole(this.super_mod_id,interaction)) {
			interaction.reply("Invalid permissions").then(null,null);
			return;
		}
		var _g = command.content;
		if(_g._hx_index == 2) {
			var _g1 = _g.number;
			if(this.active) {
				this.active = false;
				this.last_checked = -1;
				interaction.reply("Disabled haxe roundup monitoring");
				return;
			}
			haxe_Log.trace(_g1,{ fileName : "src/systems/commands/Roundup.hx", lineNumber : 72, className : "systems.commands.Roundup", methodName : "run"});
			if(_g1 <= 600) {
				interaction.reply("Please enter a more recent roundup issue.");
				return;
			}
			this.active = true;
			this.roundup = _g1 | 0;
			interaction.reply("Will start watching haxe roundups from **#" + _g1 + "**.");
			interaction.client.channels.fetch(this.announcement_channel).then(function(channel) {
				_gthis.channel = channel;
			},function(error) {
				haxe_Log.trace(error,{ fileName : "src/systems/commands/Roundup.hx", lineNumber : 85, className : "systems.commands.Roundup", methodName : "run"});
			});
		}
	}
	,get_name: function() {
		return "roundup";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var systems_commands_Rtfm = function(_universe) {
	systems_CommandBase.call(this,_universe);
};
systems_commands_Rtfm.__name__ = true;
systems_commands_Rtfm.__super__ = systems_CommandBase;
systems_commands_Rtfm.prototype = $extend(systems_CommandBase.prototype,{
	onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
		this.data = Util_loadFile("rtfm",{ fileName : "src/systems/commands/Rtfm.hx", lineNumber : 9, className : "systems.commands.Rtfm", methodName : "onAdded"});
	}
	,run: function(command,interaction) {
		if(this.data == null) {
			haxe_Log.trace("failed to read rtfm data",{ fileName : "src/systems/commands/Rtfm.hx", lineNumber : 14, className : "systems.commands.Rtfm", methodName : "run"});
			return;
		}
		var _g = command.content;
		if(_g._hx_index == 3) {
			var _g1 = _g.channel;
			var compare = _g1;
			if(_g1 == null) {
				compare = interaction.channel.name;
			}
			var _g = 0;
			var _g1 = this.data;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = item.keys;
				while(_g2 < _g3.length) if(_g3[_g2++] == compare) {
					interaction.reply(item.content);
					return;
				}
			}
			interaction.reply("No information available.");
		}
	}
	,get_name: function() {
		return "rtfm";
	}
});
var systems_commands_Run = function(_universe) {
	this.code_requests = new haxe_ds_StringMap();
	this.haxe_version = null;
	systems_CommandBase.call(this,_universe);
};
systems_commands_Run.__name__ = true;
systems_commands_Run.__super__ = systems_CommandBase;
systems_commands_Run.prototype = $extend(systems_CommandBase.prototype,{
	run: function(command,interaction) {
		var _gthis = this;
		var _g = command.content;
		if(_g._hx_index == 6) {
			if(this.haxe_version == null) {
				var $process = "./haxe/haxe";
				if(!sys_FileSystem.exists("./haxe/haxe")) {
					$process = "haxe";
				}
				var ls = js_node_ChildProcess.spawn($process,["--version"]);
				ls.stdout.once("data",function(data) {
					_gthis.haxe_version = data.toString().substring(0,5);
					ls.kill();
				});
			}
			this.extractCode(_g.code,interaction);
		}
	}
	,codeSource: function(code) {
		var remote = new EReg("^(!run #([a-zA-Z0-9]{5,8}))","gi");
		var source = "";
		if(remote.match(code)) {
			source = "https://try.haxe.org/#" + remote.matched(2);
		}
		return source;
	}
	,extractCode: function(code,interaction) {
		if(code.length > 0) {
			this.parse(interaction,code);
		}
	}
	,extractLibs: function(code) {
		var check_code = new EReg("(/?/?-l\\W.*)","gmiu");
		if(!check_code.match(code)) {
			return [];
		}
		var libs = [];
		while(check_code.match(code)) {
			var split = check_code.matched(1).split(" ");
			libs.push("-L");
			libs.push(split[1]);
			code = check_code.matchedRight();
		}
		return libs;
	}
	,canRequest: function(data) {
		var timings = 0.0;
		var last = 0.0;
		var count = 1;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			if(data.length % 2 == 1 && data.length - i == 1) {
				break;
			}
			if(i % 2 == 0) {
				last = data[i];
				continue;
			}
			timings += data[i] - last;
			++count;
		}
		if(data.length >= 6) {
			return timings / count > 2000;
		} else {
			return true;
		}
	}
	,cleanOutput: function(data,filename,class_entry) {
		data = data.toString();
		new RegExp("(\\[(.*|vm)\\].*)$","igmu".split("u").join(""));
		data = StringTools.replace(StringTools.replace(data,filename,class_entry),"\x1B","");
		data = StringTools.replace(data,this.get_base_path(),"");
		data = StringTools.replace(data,"/hx/","");
		data = StringTools.replace(data,"/bin/","");
		return data;
	}
	,getImportAndUsings: function(input,index) {
		if(index == null) {
			index = 0;
		}
		var regex = new EReg("^(import|using)(.*);$","igmu");
		var matches = [];
		while(regex.match(input)) {
			matches.push(regex.matched(index));
			input = regex.matchedRight();
		}
		return { code : input, paths : matches};
	}
	,parse: function(message,code) {
		var user = "<@" + message.user.id + ">";
		if(this.code_requests.h[user] == null) {
			this.code_requests.h[user] = [];
		}
		this.code_requests.h[user].push(message.createdTimestamp);
		if(!this.canRequest(this.code_requests.h[user])) {
			message.reply({ content : "" + user + " - Wait 3 seconds before submitting code requests."});
			return;
		}
		if(code == null) {
			message.reply({ content : "Your `!run` command formatting is incorrect. Check the pin in <#663246792426782730>."});
			return;
		}
		if(new EReg("(class.*({|\n{))","mgu").match(code)) {
			if(!new EReg("(^class\\s(Test|Main)(\n|\\s|\\S))","mgu").match(code)) {
				message.reply({ content : "You must have a class called `Test` or `Main`"});
				return;
			}
		}
		if(!this.isSafe(code,message)) {
			message.reply({ content : "Your code contains bad things."});
			return;
		}
		this.runCodeOnThread(code,message);
	}
	,isSafe: function(code,interaction) {
		if(new EReg("haxe.http|haxe.Http","gmu").match(code)) {
			return false;
		}
		if(!Main.config.macros) {
			if(new EReg("@:.*[bB]uild","igmu").match(code)) {
				interaction.reply({ content : "Currently no build macros allowed"});
				return false;
			}
		} else if(code.indexOf("macro") != -1 || new EReg("macro|@:.*[bB]uild","igmu").match(code)) {
			return false;
		}
		return !new EReg("(\\}\\})|(sys|((\"|')s(.*)y(.*)(\"|')s(\"|'))|eval|command|syntax.|require|location|untyped|@:.*[bB]uild)","igmu").match(code);
	}
	,runCodeOnThread: function(code,interaction) {
		var _gthis = this;
		if(!this.isSafe(code,interaction)) {
			interaction.reply({ content : "Your code contains bad things."});
			return;
		}
		var mention = "";
		var libs = this.extractLibs(code);
		var lib_regex = new EReg("(/?/?-l\\W.*)","gmiu");
		if(lib_regex.match(code)) {
			code = code.replace(lib_regex.r,"");
		}
		var get_paths = this.getImportAndUsings(code);
		var format = "";
		var _g = 0;
		var _g1 = get_paths.paths;
		while(_g < _g1.length) format += _g1[_g++];
		try {
			var filename = "H" + interaction.user.id + "_" + new Date().getTime();
			var check_class = new EReg("(^class\\s(Test|Main)(\n|\\s|\\S))","mg");
			var code_content = "";
			var class_entry = "Main";
			if(check_class.match(get_paths.code)) {
				var parsed = check_class.matched(0);
				var replaced = "";
				if(parsed.indexOf("Test") != -1) {
					class_entry = "Test";
				}
				var by = StringTools.replace(parsed,class_entry,filename);
				replaced = parsed.replace(check_class.r,by);
				code_content = StringTools.replace(get_paths.code,parsed,replaced);
			} else {
				code_content = "class " + filename + " {static function main() {" + get_paths.code + "}}";
			}
			code_content = format + "\n" + code_content;
			js_node_Fs.appendFile("" + this.get_base_path() + "/hx/" + filename + ".hx",code_content + ("//User:" + interaction.user.username + " | time: " + Std.string(new Date())),function(error) {
				if(error != null) {
					haxe_Log.trace(error,{ fileName : "src/systems/commands/Run.hx", lineNumber : 221, className : "systems.commands.Run", methodName : "runCodeOnThread"});
				}
				var commands = ["-cp","" + _gthis.get_base_path() + "/hx","-main",filename,"-js","" + _gthis.get_base_path() + "/bin/" + filename + ".js"];
				var $process = "./haxe/haxe";
				if(!sys_FileSystem.exists("./haxe/haxe")) {
					$process = "haxe";
				}
				var ls = js_node_ChildProcess.spawn($process,libs.concat(commands),{ timeout : 10000});
				ls.stderr.once("data",function(data) {
					haxe_Log.trace("error: " + data,{ fileName : "src/systems/commands/Run.hx", lineNumber : 246, className : "systems.commands.Run", methodName : "runCodeOnThread"});
					var compile_output = _gthis.cleanOutput(data,filename,class_entry);
					interaction.reply({ content : mention + ("```\n" + compile_output + "```")});
					ls.kill("SIGTERM");
				});
				ls.once("close",function(data) {
					var response = "";
					var js_file = "" + _gthis.get_base_path() + "/bin/" + filename + ".js";
					if(!sys_FileSystem.exists(js_file)) {
						haxe_Log.trace("Code likely errored and didnt compile (" + filename + ".js)",{ fileName : "src/systems/commands/Run.hx", lineNumber : 257, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						ls.kill("SIGTERM");
						return;
					}
					var vm = new vm2_NodeVM({ sandbox : null, console : "redirect"});
					vm.on("console.log",function(data,info) {
						haxe_Log.trace(data,{ fileName : "src/systems/commands/Run.hx", lineNumber : 268, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						haxe_Log.trace(info,{ fileName : "src/systems/commands/Run.hx", lineNumber : 269, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						response += "" + info + "\n";
						return response;
					});
					try {
						vm.runFile(js_file);
						var x = response.split("\n");
						var truncated = false;
						if(x.length > 21) {
							truncated = true;
							response = "";
							var _g = 0;
							var _g1 = x.slice(x.length - 20);
							while(_g < _g1.length) response += _g1[_g++] + "\n";
						}
						var embed = new discord_$js_MessageEmbed();
						embed.type = "article";
						var code_output = "";
						var _this = response.split("\n");
						var _g2_current = 0;
						while(_g2_current < _this.length) {
							var _g3_value = _this[_g2_current++];
							code_output += "" + (_g2_current - 1) + ". " + _g3_value + " \n";
						}
						if(truncated) {
							code_output += "\n//Output has been trimmed.";
						}
						haxe_Log.trace(get_paths.code.charAt(0),{ fileName : "src/systems/commands/Run.hx", lineNumber : 296, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						haxe_Log.trace(get_paths.code.charAt(1),{ fileName : "src/systems/commands/Run.hx", lineNumber : 297, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						var desc = "**Code:**\n```hx\n" + get_paths.code + "``` **Output:**\n ```markdown\n" + code_output + "\n```";
						haxe_Log.trace(desc,{ fileName : "src/systems/commands/Run.hx", lineNumber : 299, className : "systems.commands.Run", methodName : "runCodeOnThread"});
						embed.setDescription(desc);
						var url = _gthis.codeSource(code);
						if(url == "") {
							embed.setAuthor("@" + interaction.user.tag,interaction.user.displayAvatarURL());
						} else {
							embed.setTitle("TryHaxe #" + url.split("#")[1]);
							embed.setURL(url);
							embed.setAuthor("@" + interaction.user.tag,interaction.user.displayAvatarURL());
						}
						embed.setFooter("Haxe " + _gthis.haxe_version,"https://cdn.discordapp.com/emojis/567741748172816404.png?v=1");
						if(response.length > 0 && data == 0) {
							interaction.reply({ embeds : [embed]});
							ls.kill();
							return;
						}
					} catch( _g ) {
						haxe_Log.trace(haxe_Exception.caught(_g),{ fileName : "src/systems/commands/Run.hx", lineNumber : 322, className : "systems.commands.Run", methodName : "runCodeOnThread"});
					}
				});
			});
		} catch( _g ) {
			haxe_Log.trace(haxe_Exception.caught(_g).unwrap(),{ fileName : "src/systems/commands/Run.hx", lineNumber : 327, className : "systems.commands.Run", methodName : "runCodeOnThread"});
			interaction.reply({ content : mention + "Code failed to execute."});
		}
	}
	,get_base_path: function() {
		var path = haxe_io_Path.isAbsolute(".") ? "." : js_node_Path.resolve(".");
		if(!sys_FileSystem.exists(path + "/haxebot")) {
			sys_FileSystem.createDirectory(path + "/haxebot");
		}
		path += "/haxebot";
		path += "/" + DateTools.format(new Date(),"%F");
		if(!sys_FileSystem.exists(path)) {
			sys_FileSystem.createDirectory(path);
		}
		if(!sys_FileSystem.exists(path + "/hx")) {
			sys_FileSystem.createDirectory(path + "/hx");
		}
		if(!sys_FileSystem.exists(path + "/bin")) {
			sys_FileSystem.createDirectory(path + "/bin");
		}
		return path;
	}
	,get_name: function() {
		return "run";
	}
	,onAdded: function() {
		systems_CommandBase.prototype.onAdded.call(this);
	}
});
var vm2_NodeVM = require("vm2").NodeVM;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Main.connected = false;
ecs_Entity.none = ecs_Entity._new(-1);
systems_commands_Api.haxe = "https://api.haxe.org/";
systems_commands_Api.openfl = "https://api.openfl.org/";
systems_commands_Api.flixel = "https://api.haxeflixel.com/";
systems_commands_Api.heaps = "https://heaps.io/api/";
systems_commands_Api.lime = "https://api.lime.software/";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
